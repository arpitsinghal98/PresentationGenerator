name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test || echo "No tests found"

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
        
      # Debug Next.js output structure
      - name: Debug build output
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Next.js build output structure:"
          ls -la .next/ || echo ".next directory not found"
          echo "Checking for standalone output:"
          ls -la .next/standalone/ || echo ".next/standalone/ directory not found"
          echo "next.config.js content:"
          cat next.config.js
          
      # Verify paths exist before upload
      - name: Verify artifact paths
        run: |
          mkdir -p artifact-bundle
          
          # Copy files to a staging directory with verification
          if [ -d ".next" ]; then
            echo ".next directory found, copying..."
            cp -r .next artifact-bundle/
          else
            echo "ERROR: .next directory not found"
            exit 1
          fi
          
          if [ -d "public" ]; then
            echo "public directory found, copying..."
            cp -r public artifact-bundle/
          else
            echo "ERROR: public directory not found"
            exit 1
          fi
          
          if [ -f "package.json" ]; then
            echo "package.json found, copying..."
            cp package.json artifact-bundle/
          else
            echo "ERROR: package.json not found"
            exit 1
          fi
          
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json found, copying..."
            cp package-lock.json artifact-bundle/
          else
            echo "ERROR: package-lock.json not found"
            exit 1
          fi
          
          if [ -f "next.config.js" ]; then
            echo "next.config.js found, copying..."
            cp next.config.js artifact-bundle/
          else
            echo "ERROR: next.config.js not found"
            exit 1
          fi
          
          echo "All files verified and copied to artifact-bundle directory"
          ls -la artifact-bundle/
          
      # Upload with a simpler path configuration
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: artifact-bundle

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: ./
          
      # Debug downloaded artifacts
      - name: Verify downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          ls -la
          echo "Next.js build directory:"
          ls -la .next/ || echo ".next directory not found"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: vibing-prod:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max